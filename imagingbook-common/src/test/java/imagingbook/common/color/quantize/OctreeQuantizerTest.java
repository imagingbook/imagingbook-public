/*******************************************************************************
 * This software is provided as a supplement to the authors' textbooks on digital
 * image processing published by Springer-Verlag in various languages and editions.
 * Permission to use and distribute this software is granted under the BSD 2-Clause
 * "Simplified" License (see http://opensource.org/licenses/BSD-2-Clause).
 * Copyright (c) 2006-2023 Wilhelm Burger, Mark J. Burge. All rights reserved.
 * Visit https://imagingbook.com for additional details.
 ******************************************************************************/
package imagingbook.common.color.quantize;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

import ij.process.ColorProcessor;
import imagingbook.common.math.Matrix;
import imagingbook.common.math.PrintPrecision;
import imagingbook.core.resource.ImageResource;
import imagingbook.testimages.ColorTestImage;
import imagingbook.testutils.NumericTestUtils;

public class OctreeQuantizerTest {
	
	static float TOL = 1e-3f;
	
	static double[][] clown5 = {
			{27.1191, 9.4410, 5.4239}, 
			{92.0935, 39.9477, 15.5389}, 
			{113.4886, 76.1538, 48.8703}, 
			{167.5936, 86.0977, 31.5271}, 
			{219.8440, 175.1063, 131.6864}};
	
	static double[][] clown16 = {
			{16.5429, 5.3119, 3.7536}, 
			{47.0255, 16.1811, 7.4836}, 
			{58.8863, 36.8519, 26.2146}, 
			{82.3016, 43.2623, 18.5641}, 
			{111.7423, 50.7621, 13.2373}, 
			{87.4099, 29.8233, 14.4591}, 
			{113.4886, 76.1538, 48.8703}, 
			{151.0204, 38.1984, 14.4967}, 
			{147.5129, 75.6842, 13.9607}, 
			{169.2405, 93.2769, 29.8270}, 
			{202.9751, 113.9642, 26.8327}, 
			{170.3813, 111.9156, 79.5977}, 
			{207.9552, 145.8371, 91.0997}, 
			{236.9312, 208.0917, 171.9273}, 
			{222.1992, 190.1497, 158.1737}, 
			{127.0000, 127.0000, 133.5000}};	
	
	static double[][] twoColors2 = {
			{255.0000, 0.0000, 0.0000}, 
			{70.0000, 255.0000, 0.0000}};
	
	static double[][] twoColors1 = {
			{108.2146, 202.3258, 0.0000}};
	
	static double[][] singleColor1 = {
			{70.0000, 255.0000, 0.0000}};
	
	static double[][] randomColors5 = {
			{204.4535, 52.2362, 47.8808}, 
			{94.6713, 225.9223, 29.8943}, 
			{56.5873, 201.0135, 54.5554}, 
			{168.9402, 202.9256, 48.6169}, 
			{94.0240, 130.9872, 103.8012}};
	
	static double[][] randomColors256 = {
			{40.3043, 46.1739, 32.3478}, 
			{116.4348, 19.6957, 16.1304}, 
			{102.9811, 41.7736, 31.3774}, 
			{19.4444, 116.2593, 16.2222}, 
			{47.0000, 115.0370, 16.1111}, 
			{48.5200, 116.0800, 50.6000}, 
			{28.5306, 94.9796, 35.8163}, 
			{78.3333, 113.3889, 14.6944}, 
			{110.3500, 114.3000, 17.2500}, 
			{78.7308, 114.5769, 48.0385}, 
			{110.8611, 114.5000, 48.2500}, 
			{101.5000, 78.8333, 31.0000}, 
			{101.9545, 33.7273, 92.5455}, 
			{36.9825, 106.4561, 94.4211}, 
			{114.3000, 116.6000, 81.5000}, 
			{95.4762, 104.2381, 93.5238}, 
			{38.2727, 40.0909, 92.8182}, 
			{145.3704, 12.4815, 15.1481}, 
			{179.8200, 16.1200, 16.1800}, 
			{144.4815, 47.5556, 13.9630}, 
			{178.5208, 52.5000, 14.6042}, 
			{178.7174, 12.6957, 50.4348}, 
			{175.9231, 47.7308, 47.7308}, 
			{148.1481, 27.5556, 45.4815}, 
			{208.6184, 15.2632, 15.2237}, 
			{241.1059, 15.2118, 15.8588}, 
			{208.6667, 47.4493, 15.1449}, 
			{239.8902, 48.0000, 16.5244}, 
			{208.2727, 14.5273, 47.2182}, 
			{241.5143, 16.8857, 46.9714}, 
			{207.0976, 49.4146, 48.1220}, 
			{240.2340, 46.1915, 49.9149}, 
			{177.4286, 79.4286, 14.7500}, 
			{145.7083, 115.3750, 13.5833}, 
			{177.4545, 112.8182, 15.6364}, 
			{181.0606, 78.8182, 49.2727}, 
			{152.1364, 101.3939, 39.7879}, 
			{208.8627, 79.2353, 17.7647}, 
			{240.2955, 81.3636, 13.5909}, 
			{209.6667, 111.0833, 17.5000}, 
			{244.3044, 113.6957, 13.1739}, 
			{210.2593, 80.5926, 51.1481}, 
			{238.5294, 79.7647, 48.0980}, 
			{208.5000, 111.7000, 45.0000}, 
			{240.5667, 111.4667, 46.9000}, 
			{177.8684, 17.3947, 78.3158}, 
			{159.3044, 37.1522, 92.0870}, 
			{209.9722, 18.2778, 78.1667}, 
			{240.0227, 16.6364, 78.9773}, 
			{212.0000, 46.5313, 78.8438}, 
			{240.3226, 43.8710, 79.7742}, 
			{209.4231, 14.8846, 110.0000}, 
			{237.4375, 13.7813, 108.6250}, 
			{220.2069, 48.8966, 107.7931}, 
			{165.6389, 93.9167, 89.1806}, 
			{242.4091, 79.5909, 78.9091}, 
			{221.4750, 95.5500, 96.0750}, 
			{18.1026, 148.8462, 12.6154}, 
			{48.2308, 146.4154, 15.0923}, 
			{16.9136, 178.4691, 17.1481}, 
			{56.2727, 184.7727, 23.2727}, 
			{48.0105, 176.9579, 13.7053}, 
			{18.0000, 147.1463, 50.4878}, 
			{48.1200, 146.6000, 47.1200}, 
			{17.2500, 177.2353, 49.0588}, 
			{50.1757, 176.8784, 47.0946}, 
			{81.4603, 144.7460, 15.0794}, 
			{113.8793, 145.7586, 16.7069}, 
			{79.5398, 176.7522, 16.7788}, 
			{112.0297, 178.6931, 15.6931}, 
			{80.9259, 144.9259, 48.1852}, 
			{109.7143, 144.8980, 49.1429}, 
			{80.3409, 178.5455, 47.1477}, 
			{111.1711, 177.7237, 48.4474}, 
			{10.2174, 217.3913, 8.2609}, 
			{22.5500, 216.4500, 8.0000}, 
			{16.1290, 205.8172, 19.3548}, 
			{39.3500, 201.2500, 6.9500}, 
			{41.1538, 217.0385, 8.8077}, 
			{55.9545, 217.4091, 7.7273}, 
			{57.4762, 200.2857, 26.0000}, 
			{55.2000, 217.2000, 23.5000}, 
			{45.2222, 206.9111, 18.2667}, 
			{24.1111, 230.4815, 9.3704}, 
			{6.0000, 247.6522, 7.8261}, 
			{24.0323, 247.2581, 7.3226}, 
			{23.6000, 232.4000, 24.6800}, 
			{9.3500, 249.1500, 23.6000}, 
			{15.1887, 237.5849, 18.7547}, 
			{41.8710, 231.8387, 7.3226}, 
			{56.1936, 233.7742, 9.0000}, 
			{39.8276, 248.1035, 9.2759}, 
			{58.0417, 247.0833, 7.0417}, 
			{41.6250, 232.2917, 24.6667}, 
			{57.3846, 232.6923, 25.6538}, 
			{57.5294, 249.4118, 24.0000}, 
			{41.3750, 248.7500, 23.6875}, 
			{24.8000, 200.2500, 57.0500}, 
			{16.5294, 210.3431, 46.1373}, 
			{48.2560, 209.3040, 48.3040}, 
			{8.2174, 232.6956, 41.9130}, 
			{25.2000, 231.8000, 42.0000}, 
			{18.0122, 243.8293, 50.0732}, 
			{40.8750, 234.2500, 37.5000}, 
			{56.8182, 232.9091, 39.6818}, 
			{56.0455, 232.0000, 56.7727}, 
			{47.2299, 244.3563, 50.3908}, 
			{72.7308, 201.0769, 7.7308}, 
			{88.9583, 199.8750, 7.2083}, 
			{71.5357, 216.7500, 5.3214}, 
			{89.4800, 215.2400, 7.2400}, 
			{72.4500, 200.8000, 22.9500}, 
			{89.0000, 200.0500, 24.6500}, 
			{70.9545, 217.7727, 25.2727}, 
			{88.1053, 216.8421, 24.3158}, 
			{104.8182, 200.4091, 6.8636}, 
			{120.1905, 203.1429, 9.9524}, 
			{105.1000, 216.9500, 8.1500}, 
			{121.1429, 200.2857, 25.2857}, 
			{103.6000, 215.7000, 25.2000}, 
			{115.4038, 211.7308, 20.2115}, 
			{72.6487, 232.0000, 7.8919}, 
			{86.9130, 233.8261, 8.2174}, 
			{90.1786, 249.2143, 8.0357}, 
			{71.5417, 230.9167, 24.4583}, 
			{88.0000, 233.5000, 26.0417}, 
			{72.6563, 246.7500, 24.5938}, 
			{89.1786, 247.1429, 23.8214}, 
			{72.5556, 248.7222, 8.1667}, 
			{105.2273, 233.0455, 6.4091}, 
			{120.5600, 233.4400, 7.0800}, 
			{104.3913, 247.6087, 7.2174}, 
			{120.4444, 247.8889, 7.4444}, 
			{105.5000, 249.5000, 27.2857}, 
			{115.3043, 236.4783, 24.6304}, 
			{80.2927, 208.7886, 47.5041}, 
			{112.2883, 207.7297, 48.8739}, 
			{71.5161, 233.9677, 40.6452}, 
			{87.6818, 233.7273, 39.9091}, 
			{88.9615, 246.7692, 41.6538}, 
			{71.9615, 232.1923, 55.6154}, 
			{71.2857, 247.4762, 55.0000}, 
			{89.5217, 247.8696, 56.3913}, 
			{81.2973, 239.1622, 48.4865}, 
			{104.6087, 232.6956, 40.9130}, 
			{121.7273, 231.3182, 56.0000}, 
			{111.7113, 241.7113, 48.8247}, 
			{14.0714, 146.3571, 78.5357}, 
			{49.3421, 146.5263, 80.2895}, 
			{19.3115, 176.1148, 80.2787}, 
			{50.4615, 179.6923, 79.3654}, 
			{14.6250, 144.1250, 112.5417}, 
			{22.8750, 178.0417, 110.5833}, 
			{48.9714, 178.2571, 109.6000}, 
			{47.4286, 143.8571, 110.3571}, 
			{79.8889, 144.5111, 76.6222}, 
			{111.5000, 148.5000, 77.0909}, 
			{81.3846, 175.6538, 78.0192}, 
			{114.0444, 175.1778, 78.3778}, 
			{80.5128, 177.4359, 110.5897}, 
			{113.2222, 178.0370, 112.5185}, 
			{95.6500, 145.4000, 110.4000}, 
			{16.1667, 208.5152, 80.4242}, 
			{48.7614, 208.6818, 78.5000}, 
			{16.9231, 239.5897, 79.3333}, 
			{48.4330, 240.7629, 79.5361}, 
			{17.2895, 209.0526, 110.0526}, 
			{48.7333, 208.5667, 108.8167}, 
			{16.3158, 242.0789, 109.0789}, 
			{48.1579, 241.1930, 109.8947}, 
			{81.7444, 208.5556, 78.0778}, 
			{112.2963, 208.5679, 79.0741}, 
			{72.0500, 232.1500, 72.9500}, 
			{81.9278, 239.7526, 81.2887}, 
			{112.7248, 239.9174, 78.9266}, 
			{81.4419, 209.6512, 111.6047}, 
			{113.1556, 211.4667, 110.9556}, 
			{79.8727, 239.0182, 111.5273}, 
			{110.2800, 242.2000, 111.7000}, 
			{146.0476, 148.2381, 16.8571}, 
			{177.0417, 142.2917, 16.6667}, 
			{141.8197, 180.3279, 17.7705}, 
			{176.5625, 175.5938, 15.6563}, 
			{143.4054, 144.3513, 49.2703}, 
			{176.4500, 147.4000, 45.2500}, 
			{141.0000, 175.0357, 48.4643}, 
			{175.8889, 178.2778, 48.3889}, 
			{209.5000, 146.3636, 15.9545}, 
			{207.2500, 147.3333, 52.4583}, 
			{224.0959, 166.8767, 30.5068}, 
			{141.8909, 208.6182, 14.7727}, 
			{176.4478, 208.8806, 16.2239}, 
			{135.8500, 233.8000, 6.9000}, 
			{151.2500, 232.9000, 8.6000}, 
			{143.6875, 241.7375, 17.9750}, 
			{167.5455, 232.9091, 8.7727}, 
			{176.1667, 241.8958, 14.5417}, 
			{143.5211, 209.3380, 48.0563}, 
			{174.2857, 209.3571, 49.4048}, 
			{143.5227, 241.1250, 47.5795}, 
			{173.6808, 239.8085, 47.0426}, 
			{207.7037, 207.2963, 15.6667}, 
			{206.4286, 238.5000, 14.6429}, 
			{207.6786, 239.5000, 48.2500}, 
			{230.7619, 222.0000, 39.3651}, 
			{142.2647, 176.6471, 80.0588}, 
			{175.1667, 179.4000, 82.6667}, 
			{141.5455, 177.9545, 112.7273}, 
			{157.6226, 149.4340, 92.1321}, 
			{221.6129, 160.7097, 89.6936}, 
			{142.2037, 210.1852, 80.7222}, 
			{175.1200, 208.8800, 77.5200}, 
			{145.2264, 239.9245, 79.9434}, 
			{175.9259, 240.7778, 80.6667}, 
			{145.5172, 208.3103, 108.5862}, 
			{142.5789, 242.7895, 111.7368}, 
			{175.0870, 241.7826, 114.3913}, 
			{175.0000, 209.3077, 111.7692}, 
			{215.9821, 226.7500, 90.3214}, 
			{76.0256, 88.2051, 155.6410}, 
			{167.7143, 23.8571, 153.0952}, 
			{231.2727, 35.5000, 150.5455}, 
			{223.2083, 90.7500, 149.2500}, 
			{184.2000, 70.2000, 171.0000}, 
			{33.0233, 171.2093, 151.7674}, 
			{94.2600, 168.4000, 149.7400}, 
			{18.3500, 241.3500, 140.6000}, 
			{49.6923, 242.0000, 140.1154}, 
			{35.6296, 218.1852, 156.8519}, 
			{78.0500, 210.6000, 144.2000}, 
			{81.7000, 236.3333, 138.5333}, 
			{112.6957, 240.0000, 143.4348}, 
			{100.3871, 215.0968, 160.7742}, 
			{71.8684, 208.0526, 209.2105}, 
			{153.1613, 160.9677, 152.7097}, 
			{159.6735, 221.6327, 149.8980}, 
			{193.7500, 201.3125, 180.2813}};
	
	// ----------------------------------------------
	
	@Test
	public void test1() {
		runTest(ColorTestImage.Clown, 5, 5, Matrix.toFloat(clown5));
		runTest(ColorTestImage.Clown, 16, 16, Matrix.toFloat(clown16));
	}
	
	@Test
	public void test2() {
		runTest(ColorTestImage.RandomColors, 5, 5, Matrix.toFloat(randomColors5));
		runTest(ColorTestImage.RandomColors, 256, 237, Matrix.toFloat(randomColors256));
	}

	@Test
	public void test3() {
		runTest(ColorTestImage.TwoColors, 16, 2, Matrix.toFloat(twoColors2));
		runTest(ColorTestImage.TwoColors, 2, 2, Matrix.toFloat(twoColors2));
		runTest(ColorTestImage.TwoColors, 1, 1, Matrix.toFloat(twoColors1));
	}
	
	@Test
	public void test4() {
		runTest(ColorTestImage.SingleColor, 16, 1, Matrix.toFloat(singleColor1));
		runTest(ColorTestImage.SingleColor, 1, 1, Matrix.toFloat(singleColor1));
	}
	
	// --------------------------------
	
	static boolean SHOWCOLORMAP = false;
	
	private void runTest(ImageResource ir, int K, int Kact, float[][] colormap) {
		ColorProcessor cp = (ColorProcessor) ir.getImagePlus().getProcessor();
		ColorQuantizer quantizer = new OctreeQuantizer((int[])cp.getPixels(), K);
		assertEquals(Kact, quantizer.getColorCount());
		float[][] cm = quantizer.getColorMap();
		
		if (SHOWCOLORMAP) {
			PrintPrecision.set(4);
			System.out.println(Matrix.toString(cm));
			System.out.println();
		}
		NumericTestUtils.assert2dArrayEquals(colormap, cm, TOL);
	}

}
